#!/bin/sh
### BEGIN INIT INFO
# Provides:          authentic2
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Authentic2 is a versatile identity provider
# Description:       Authentic2 is a versatile identity provider
### END INIT INFO

# Author: Jérôme Schneider <jschneider@entrouvert.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=authentic2
NAME=authentic2
DAEMON=/usr/bin/gunicorn
PID_DIR=/var/run/$NAME
CACHE_DIR=/var/cache/$NAME
LOG_DIR=/var/log/$NAME
PIDFILE=$PID_DIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
CTL=/usr/bin/$NAME-ctl
BIND=unix:$PID_DIR/$NAME.sock

USER=authentic
GROUP=authentic

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

DAEMON_ARGS="--pid $PIDFILE \
--user $USER --group $GROUP \
--daemon \
--access-logfile $LOG_DIR/gunicorn-access.log \
--log-file $LOG_DIR/gunicorn-error.log \
--bind=$BIND \
--workers=10 \
--worker-class=sync \
--timeout=60 \
authentic2.wsgi:application"

# Load confg
. /etc/authentic2/authentic.conf

# Load extra config
for extra_config in `ls /etc/authentic2/config.d|sort -V`; do
	. $extra_config
done

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Create pid directory
if [ ! -d $PID_DIR ]; then
    install -d -m 755 -o $USER -g $GROUP $PID_DIR
fi

# Create cache directory
if [ ! -d $CACHE_DIR ]; then
    install -d -m 755 -o $USER -g $GROUP $CACHE_DIR
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

do_migrate() {
    log_action_msg "Applying new migrations .."
    su $USER -p -c "$CTL syncdb --migrate --noinput"
    log_action_msg ".. done"
}

do_collectstatic() {
    log_action_msg "Collecting static files .."
    su $USER -p -c "$CTL collectstatic -l --noinput"
    log_action_msg ".. done"
}


case "$1" in
  start)
    log_daemon_msg "Starting $DESC " "$NAME"
    do_migrate
    do_collectstatic
    do_start
    case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
  ;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
    do_migrate
    do_collectstatic
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  collectstatic)
    do_collectstatic
  ;;
  migrate)
    do_migrate
  ;;
  manage)
    shift
    if [ $(id -un) != "$USER" ]; then
        sudo -u $USER -- $CTL "$@"
    else
        $CTL "$@"
    fi
  ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

